services:
  frontend:
    build: ./frontend/position-book-system/
    container_name: position-book-frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend/position-book-system:/app
    environment:
      - VITE_API_BASE_URL=http://localhost:8000/api
      - VITE_API_VERSION=/v1
    env_file:
      - ./frontend/position-book-system/.env
    stdin_open: true
    tty: true
    command: sh -c "npm install && npm cache clean --force && npm run dev"
    depends_on:
      - kong
    networks:
      - front-tier

  backend:
    build: ./backend/position-book-system/
    container_name: position-book-server
    ports:
      - "8080:8080"
    depends_on:
      - kafka
      - kafka-topics-generator  # Wait for topics to be created
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - back-tier
      - kafka-tier

  kafka:
    image: confluentinc/cp-kafka:7.4.3
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      # KRaft mode configuration
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      # Define distinct listeners with unique names: INTERNAL and EXTERNAL
      KAFKA_LISTENERS: 'INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092,CONTROLLER://kafka:29093'
      # Advertise both: internal for Docker services, external for host access
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka:29092,EXTERNAL://localhost:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL' # Brokers connect using the INTERNAL listener
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      # Map security protocols to the new listener names
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      CLUSTER_ID: 'TEST-CLUSTER-ID-123456'
      # Topic and replication settings
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # JMX monitoring
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:29092", "--list"]
      interval: 1s
      timeout: 5s
      retries: 10
    networks:
      - kafka-tier
      - back-tier

  kafka-topics-generator:
    image: confluentinc/cp-kafka:7.4.3
    container_name: kafka-topics-generator
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["sh", "-c"]
    command: |
      "
      echo 'Waiting for Kafka...' &&
      for i in `seq 1 30`; do
        kafka-topics --bootstrap-server kafka:29092 --list && break
        sleep 2
      done &&
      echo 'Creating topic...' &&
      kafka-topics --create --topic api-logs --if-not-exists --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 &&
      kafka-topics --create --topic gateway-logs --if-not-exists --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1
      "
    networks:
      - kafka-tier

  kafka-console-consumer-server:
    image: confluentinc/cp-kafka:latest
    container_name: server-logs
    depends_on:
      - kafka-topics-generator
    command: >
      bash -c
        "sleep 25s &&
        kafka-console-consumer --bootstrap-server kafka:29092 --topic api-logs --from-beginning --group console-consumer-group"
    tty: true
    networks:
      - kafka-tier

  kafka-console-consumer-gateway:
    image: confluentinc/cp-kafka:latest
    container_name: gateway-logs
    depends_on:
      - kafka-topics-generator
    command: >
      bash -c
        "sleep 25s &&
        kafka-console-consumer --bootstrap-server kafka:29092 --topic gateway-logs --from-beginning --group console-consumer-group"
    tty: true
    networks:
      - kafka-tier

  kong:
    build:
      context: ./plugins
      dockerfile: ./Dockerfile
    container_name: kong
    environment:
      KONG_LOG_LEVEL: debug
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
      # Plugins configuration
      KONG_PLUGINS: "bundled, ps-rate-limiter, ps-kafka-logger"
      KONG_PLUGINSERVER_NAMES: "ps_rate_limiter, ps_kafka_logger"
      # rate-limiter
      KONG_PLUGINSERVER_PS_RATE_LIMITER_SOCKET: "/usr/local/kong/ps-rate-limiter.socket"
      KONG_PLUGINSERVER_PS_RATE_LIMITER_EXEC:   "/usr/local/kong/go-plugins/ps-rate-limiter/ps-rate-limiter"
      KONG_PLUGINSERVER_PS_RATE_LIMITER_QUERY_CMD: "/usr/local/kong/go-plugins/ps-rate-limiter/ps-rate-limiter -dump"
      # kafka-logger
      KONG_PLUGINSERVER_PS_KAFKA_LOGGER_SOCKET: "/usr/local/kong/ps-kafka-logger.socket"
      KONG_PLUGINSERVER_PS_KAFKA_LOGGER_EXEC:   "/usr/local/kong/go-plugins/ps-kafka-logger/ps-kafka-logger"
      KONG_PLUGINSERVER_PS_KAFKA_LOGGER_QUERY_CMD: "/usr/local/kong/go-plugins/ps-kafka-logger/ps-kafka-logger -dump"
    volumes:
      - ./kong.yml:/kong/declarative/kong.yml
    ports:
      - "8000:8000"   # proxy HTTP
      - "8443:8443"   # proxy SSL
      - "8001:8001"   # admin API
      - "8444:8444"   # admin API SSL
    depends_on:
      - backend
    networks:
      - front-tier
      - back-tier
      - kafka-tier

configs:
  httpd-config:
    external: true

secrets:
  server-certificate:
    external: true

networks:
  kafka-tier: {}
  front-tier: {}
  back-tier: {}
